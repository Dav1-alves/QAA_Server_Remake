<%- include ('../partials/header.ejs') %>

    <style>
        html,
        body {
            height: calc(100% - 56px) !important;
        }
    </style>
    <script src="https://cdn.tiny.cloud/1/<%= TINY_KEY %>/tinymce/7/tinymce.min.js" referrerpolicy="origin"></script>
    <script>

        tinymce.init({
            selector: '#desc_RES',
            setup: function (editor) {
                editor.on('keyup', function () {
                    updateTextarea();
                });
            }
        });
    </script>

    <body>
        <%- include ('../partials/menu.ejs') %>

            <form action="/Question/Save" method="post" class="hidden">
                <input type="text" id="name" name="name">
                <input type="text" id="category" name="category">
                <input type="checkbox" id="checkbox" name="checkbox">
                <textarea name="desc" id="desc" required>

                </textarea>
            </form>

            <div class="w-full h-full flex items-center justify-center">
                <div class="w-[570px] h-[500px] border rounded-lg p-5 card">
                    <div class="flex justify-center gap-4" id="stepcircle">
                        <div class="flex items-center justify-center flex-col">
                            <div class="w-6 h-6 rounded-full flex justify-center items-center border border-gray-300">
                                <i class='bx bx-check text-white'></i>
                            </div>
                        </div>
                        <div class="flex items-center justify-center flex-col">
                            <div class="w-6 h-6 rounded-full flex justify-center items-center border border-gray-300">
                                <i class='bx bx-check text-white'></i>
                            </div>
                        </div>
                    </div>

                    <div id="steps" class="h-full">
                        <div class="flex items-center justify-center flex-col gap-6" style="height: calc(100% - 74px);">
                            <div class="text-3xl">
                                Criar nova pergunta
                            </div>
                            <div class="w-3/5">
                                <button
                                    class="border w-full p-2 rounded-lg bg-emerald-500 text-white hover:bg-emerald-600"
                                    id="stepNext">Começar agora.</button>
                            </div>
                        </div>

                        <div class="flex flex-col gap-4 hidden">
                            <div class="flex flex-col gap-3">
                                <label for="name_RES" class="text-lg" title="Obrigatório"><span
                                        class="text-red-500">*</span> Tema da Pergunta:</label>
                                <input type="text" class="border w-full p-2 rounded-lg" id="name_RES"
                                    onchange="nameUpdate(this)" placeholder="Tema da sua pergunta" autocomplete="off" required>

                                <div class="flex">
                                    <input type="checkbox" id="checkedInput" class="mr-2" onclick="verifyCheckbox()">
                                    <label for="checkedInput" class="text-lg">Sua pergunta é nichada? <span
                                            class="text-red-500" title="Obrigatório">*</span></label>
                                </div>
                                <div>
                                    <label for="categoryInput">Categoria <span class="text-red-500"
                                            title="Obrigatório">*</span></label>
                                    <div class="flex flex-col dropdown">
                                        <div>
                                            <input type="text" id="categoryInput" class="border w-full p-2 rounded-lg"
                                                placeholder="Digite e selecione sua categoria/subcategoria" data-id=""
                                                autocomplete="off" required>
                                        </div>
                                        <div class="w-full relative">
                                            <div
                                                class="group help w-full absolute hidden text-blue-400 bg-white rounded border">
                                                <ul class="max-h-56 overflow-auto category" id="results">
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div>
                                <button
                                    class="border w-full p-2 rounded-lg bg-emerald-500 text-white hover:bg-emerald-600 btnprx disabled:bg-transparent disabled:text-gray-400"
                                    id="stepNext" disabled>Próximo</button>

                            </div>
                        </div>

                        <div class="flex flex-col gap-4 hidden h-full">
                            <div>
                                <textarea id="desc_RES" class="h-full" required></textarea>
                            </div>
                            <div class="flex gap-3">
                                <button
                                    class="border w-5/6 p-2 rounded-lg bg-emerald-500 text-white hover:bg-emerald-600"
                                    id="stepNext">Perguntar agora</button>
                                <button class="border w-1/6 p-2 rounded-lg text-white text-gray-400"
                                    id="stepBack">Voltar</button>
                            </div>
                        </div>

                        <div class="sucess hidden rounded-lg w-full h-full flex items-center justify-center">
                            <div
                                class="load w-12 h-12 border-8 text-blue-400 text-4xl animate-spin border-transparent flex items-center justify-center border-t-blue-400 rounded-full">
                            </div>
                            <i class='bx bx-check check text-emerald-400 text-7xl hidden'></i>
                        </div>
                    </div>

                </div>
            </div>

            <script src="/dropdown.js"></script>

            <script src="/socket.io/socket.io.js"></script>

            <script>
                const socket = io();

                var categoryInput = document.getElementById('categoryInput');
                var checkedInput = document.getElementById('checkedInput');
                var resultsList = document.getElementById('results');
                var help = document.querySelector('.help');
                var query;

                const categoryF = document.getElementById('category')
                const nameF = document.getElementById('name')
                const checkboxF = document.getElementById('checkbox')
                const descF = document.getElementById('desc')

                const btnprx = document.querySelector('.btnprx')

                const Next = document.querySelectorAll('#stepNext')
                const Back = document.querySelectorAll('#stepBack')
                const Step = document.querySelectorAll('div#steps > div')
                const card = document.querySelector('.card')
                const StepCircle = document.querySelectorAll('#stepcircle div')
                var StepCurrent = 0;


                categoryInput.addEventListener('input', () => {
                    help.classList.remove('hidden')

                    query = {
                        searchText: categoryInput.value,
                        checkbox: checkedInput.checked
                    };

                    socket.emit('search', query);
                });

                socket.on('searchResults', (items) => {
                    resultsList.innerHTML = ``;
                    items.forEach(item => {
                        const li = document.createElement('li');
                        if (item.Category != undefined) {
                            li.innerHTML = `${item.name} <span class="text-gray-200">> ${item.Category.name}</span>`
                        } else {
                            li.innerHTML = `${item.name}`
                        }
                        li.classList = "p-2 hover:bg-blue-500 hover:text-white";
                        li.setAttribute('data-id', item.id)
                        li.onclick = () => {
                            categoryInput.value = item.name;
                            categoryInput.dataset.id = item.id

                            updateCategory(item.id)
                            updateButtonNext()
                        }
                        resultsList.appendChild(li);
                    });
                });

                var updateButtonNext = () => {
                    categoryF.value != "" && nameF.value != "" ? btnprx.removeAttribute('disabled') : btnprx.setAttribute('disabled', 'disabled')
                }

                var updateTextarea = () => {
                    descF.value = tinymce.get('desc_RES').getContent();
                }

                var updateCategory = (data) => {
                    categoryF.value = data

                    updateButtonNext()
                }

                var nameUpdate = (data) => {
                    nameF.value = data.value

                    updateButtonNext()
                };

                var verifyCheckbox = () => {
                    categoryInput.value = ""
                    categoryInput.dataset.id = ""
                    categoryF.value = ""
                    resultsList.innerHTML = ""
                    checkboxF.checked = checkedInput.checked

                    updateButtonNext()
                }


                var VerifySteps = (data) => {

                    switch (data) {
                        case 0:
                            for (let index = 0; index < 3; index++) {
                                index == 0 ? Step[0].classList.remove('hidden') : Step[index].classList.add('hidden')
                            }
                            break;
                        case 1:
                            for (let index = 0; index < 3; index++) {
                                index == 1 ? Step[1].classList.remove('hidden') : Step[index].classList.add('hidden')
                            }

                            card.classList.remove('w-4/5', 'h-4/5')
                            card.classList.add('w-[570px]', 'h-[350px]')
                            break;
                        case 2:
                            for (let index = 0; index < 3; index++) {
                                index == 2 ? Step[2].classList.remove('hidden') : Step[index].classList.add('hidden')
                            }
                            card.classList.add('w-4/5', 'h-4/5')

                            StepCircle[0].classList.add('active')
                            StepCircle[1].classList.add('bg-emerald-500')
                            break;
                        case 3:
                            for (let index = 0; index < 3; index++) {
                                index == 3 ? Step[3].classList.remove('hidden') : Step[index].classList.add('hidden')
                            }
                            document.querySelector('.sucess').classList.remove('hidden')
                            card.classList.remove('p-5')
                            setInterval(() => {
                                document.querySelector('.load').classList.add('hidden')
                                document.querySelector('.check').classList.remove('hidden')
                                document.querySelector('form').submit();
                            }, 1500)

                            for (let index = 0; index < StepCircle.length; index++) {
                                StepCircle[index].classList.add('hidden');
                            }
                            break;
                        default:
                            console.log(`Err`);
                    }
                }

                for (let index = 0; index < Next.length; index++) {

                    Next[index].onclick = () => {
                        StepCurrent++;
                        StepCurrent >= 3 ? StepCurrent = 3 : StepCurrent;


                        VerifySteps(StepCurrent)

                    }


                }

                for (let index = 0; index < Back.length; index++) {

                    Back[index].onclick = () => {
                        StepCurrent--;
                        StepCurrent <= 0 ? StepCurrent = 0 : StepCurrent;


                        VerifySteps(StepCurrent)
                    }


                }
            </script>

    </body>
    <%- include ('../partials/footer.ejs') %>